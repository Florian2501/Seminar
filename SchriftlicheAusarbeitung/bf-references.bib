% This file was created with Citavi 6.10.0.0

@misc{.12.05.2022,
 abstract = {A bloom filter is a probabilistic data structure that is based on hashing. It is extremely space efficient and is typically used to add elements to a set and test if an element is in a set. Though, the elements themselves are not added to a set. Instead a hash of the elements is added to the set. When testing if an element is in the bloom filter, false positives are possible. It will $\ldots$},
 year = {12.05.2022},
 title = {Bloom Filter | Brilliant Math {\&} Science Wiki},
 url = {https://brilliant.org/wiki/bloom-filter/},
 urldate = {12.05.2022}
}


@proceedings{.1998,
 year = {1998},
 title = {Proceedings of the ACM SIGCOMM '98 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
 address = {New York, NY, USA},
 publisher = {{Association for Computing Machinery}},
 isbn = {1581130031},
 series = {SIGCOMM '98}
}


@proceedings{.2002,
 year = {2002},
 title = {2002 IEEE Open Architectures and Network Programming Proceedings. OPENARCH 2002 (Cat. No.02EX571)}
}


@proceedings{.2002b,
 year = {2002},
 title = {Proceedings.Twenty-First Annual Joint Conference of the IEEE Computer and Communications Societies}
}


@proceedings{.2003,
 year = {2003},
 title = {Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data},
 address = {New York, NY, USA},
 publisher = {{Association for Computing Machinery}},
 isbn = {158113634X},
 series = {SIGMOD '03}
}


@proceedings{.2003b,
 year = {2003},
 title = {11th Symposium on High Performance Interconnects, 2003. Proceedings}
}


@proceedings{.2003c,
 year = {2003},
 title = {Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
 address = {New York, NY, USA},
 publisher = {{Association for Computing Machinery}},
 isbn = {1581137354},
 series = {SIGCOMM '03}
}


@proceedings{.2004,
 year = {2004},
 title = {Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms},
 address = {USA},
 publisher = {{Society for Industrial and Applied Mathematics}},
 isbn = {089871558X},
 series = {SODA '04}
}


@proceedings{.2005,
 year = {2005},
 title = {Proceedings of the Sixteenth Annual ACM-SIAM Symposium on Discrete Algorithms},
 address = {USA},
 publisher = {{Society for Industrial and Applied Mathematics}},
 isbn = {0898715857},
 series = {SODA '05}
}


@proceedings{.2005b,
 year = {2005},
 title = {Eighth International Workshop on the Web and Databases (WebDB '05)},
 edition = {Eighth International Workshop on the Web and Databases (WebDB '05)}
}


@proceedings{.2006,
 year = {2006},
 title = {Proceedings of the 2006 ACM SIGMOD International Conference on Management of Data},
 address = {New York, NY, USA},
 publisher = {{Association for Computing Machinery}},
 isbn = {1595934340},
 series = {SIGMOD '06}
}


@proceedings{.2006b,
 year = {2006}
}


@proceedings{.2007,
 year = {2007},
 title = {32nd IEEE Conference on Local Computer Networks (LCN 2007)}
}


@proceedings{.2014,
 year = {2014},
 title = {Proceedings of the 10th ACM International on Conference on Emerging Networking Experiments and Technologies},
 address = {New York, NY, USA},
 publisher = {{Association for Computing Machinery}},
 isbn = {9781450332798},
 series = {CoNEXT '14}
}


@article{Almeida.2007,
 author = {Almeida, Paulo S{\'e}rgio and Baquero, Carlos and Pregui{\c{c}}a, Nuno and Hutchison, David},
 year = {2007},
 title = {Scalable Bloom Filters},
 pages = {255--261},
 volume = {101},
 number = {6},
 issn = {0020-0190},
 journal = {Information Processing Letters},
 doi = {10.1016/j.ipl.2006.10.007},
 file = {Almeida, Baquero et al. 2007 - Scalable Bloom Filters:Attachments/Almeida, Baquero et al. 2007 - Scalable Bloom Filters.pdf:application/pdf}
}


@article{Bloom.1970,
 author = {Bloom, Burton H.},
 year = {1970},
 title = {Space/time trade-offs in hash coding with allowable errors},
 pages = {422--426},
 volume = {13},
 number = {7},
 issn = {0001-0782},
 journal = {Communications of the ACM},
 doi = {10.1145/362686.362692},
 file = {OriginalBloom:Attachments/OriginalBloom.pdf:application/pdf}
}


@article{Broder.2004,
 author = {Broder, Andrei and Mitzenmacher, Michael},
 year = {2004},
 title = {Network Applications of Bloom Filters: A Survey},
 pages = {485--509},
 volume = {1},
 number = {4},
 issn = {1542-7951},
 journal = {Internet Mathematics},
 doi = {10.1080/15427951.2004.10129096},
 file = {Broder, Mitzenmacher 2004 - Network Applications of Bloom Filters:Attachments/Broder, Mitzenmacher 2004 - Network Applications of Bloom Filters.pdf:application/pdf}
}


@inproceedings{Bruck.2006,
 author = {Bruck, Jehoshua and Gao, Jie and Jiang, Anxiao},
 title = {Weighted Bloom Filter},
 pages = {2304--2308},
 publisher = {{IEEE Service Center}},
 isbn = {1-4244-0505-X},
 booktitle = {Proceedings / 2006 IEEE International Symposium on Information Theory},
 year = {2006},
 address = {Piscataway, NJ},
 doi = {10.1109/ISIT.2006.261978},
 file = {WeightedBloomFilter:Attachments/WeightedBloomFilter.pdf:application/pdf}
}


@inproceedings{Chazelle.2004,
 abstract = {We introduce the Bloomier filter, a data structure for compactly encoding a function with static support in order to support approximate evaluation queries. Our construction generalizes the classical Bloom filter, an ingenious hashing scheme heavily used in networks and databases, whose main attribute---space efficiency---is achieved at the expense of a tiny false-positive rate. Whereas Bloom filters can handle only set membership queries, our Bloomier filters can deal with arbitrary functions. We give several designs varying in simplicity and optimality, and we provide lower bounds to prove the (near) optimality of our constructions.},
 author = {Chazelle, Bernard and Kilian, Joe and Rubinfeld, Ronitt and Tal, Ayellet},
 title = {The Bloomier Filter: An Efficient Data Structure for Static Support Lookup Tables},
 pages = {30--39},
 publisher = {{Society for Industrial and Applied Mathematics}},
 isbn = {089871558X},
 series = {SODA '04},
 booktitle = {Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms},
 year = {2004},
 address = {USA},
 file = {BloomierFilter:Attachments/BloomierFilter.pdf:application/pdf}
}


@inproceedings{Cohen.2003,
 abstract = {A Bloom Filter is a space-efficient randomized data structure allowing membership queries over sets with certain allowable errors. It is widely used in many applications which take advantage of its ability to compactly represent a set, and filter out effectively any element that does not belong to the set, with small error probability. This paper introduces the Spectral Bloom Filter (SBF), an extension of the original Bloom Filter to multi-sets, allowing the filtering of elements whose multiplicities are below a threshold given at query time. Using memory only slightly larger than that of the original Bloom Filter, the SBF supports queries on the multiplicities of individual keys with a guaranteed, small error probability. The SBF also supports insertions and deletions over the data set. We present novel methods for reducing the probability and magnitude of errors. We also present an efficient data structure and algorithms to build it incrementally and maintain it over streaming data, as well as over materialized data with arbitrary insertions and deletions. The SBF does not assume any a priori filtering threshold and effectively and efficiently maintains information over the entire data-set, allowing for ad-hoc queries with arbitrary parameters and enabling a range of new applications.},
 author = {Cohen, Saar and Matias, Yossi},
 title = {Spectral Bloom Filters},
 pages = {241--252},
 publisher = {{Association for Computing Machinery}},
 isbn = {158113634X},
 series = {SIGMOD '03},
 booktitle = {Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data},
 year = {2003},
 address = {New York, NY, USA},
 doi = {10.1145/872757.872787},
 file = {SpectralBF:Attachments/SpectralBF.pdf:application/pdf}
}


@inproceedings{Deng.2006,
 abstract = {Traditional duplicate elimination techniques are not applicable to many data stream applications. In general, precisely eliminating duplicates in an unbounded data stream is not feasible in many streaming scenarios. Therefore, we target at approximately eliminating duplicates in streaming environments given a limited space. Based on a well-known bitmap sketch, we introduce a data structure, Stable Bloom Filter, and a novel and simple algorithm. The basic idea is as follows: since there is no way to store the whole history of the stream, SBF continuously evicts the stale information so that SBF has room for those more recent elements. After finding some properties of SBF analytically, we show that a tight upper bound of false positive rates is guaranteed. In our empirical study, we compare SBF to alternative methods. The results show that our method is superior in terms of both accuracy and time effciency when a fixed small space and an acceptable false positive rate are given.},
 author = {Deng, Fan and Rafiei, Davood},
 title = {Approximately Detecting Duplicates for Streaming Data Using Stable Bloom Filters},
 keywords = {algorithms;approximation;data stream;duplicate detection},
 pages = {25--36},
 publisher = {{Association for Computing Machinery}},
 isbn = {1595934340},
 series = {SIGMOD '06},
 booktitle = {Proceedings of the 2006 ACM SIGMOD International Conference on Management of Data},
 year = {2006},
 address = {New York, NY, USA},
 doi = {10.1145/1142473.1142477},
 file = {StableBF:Attachments/StableBF.pdf:application/pdf}
}


@inproceedings{Dharmapurikar.2003,
 abstract = {We introduce the first algorithm that we are aware of to employ Bloom filters for Longest Prefix Matching (LPM). The algorithm performs parallel queries on Bloom filters, an efficient data structure for membership queries, in order to determine address prefix membership in sets of prefixes sorted by prefix length. We show that use of this algorithm for Internet Protocol (IP) routing lookups results in a search engine providing better performance and scalability than TCAM-based approaches. The key feature of our technique is that the performance, as determined by the number of dependent memory accesses per lookup, can be held constant for longer address lengths or additional unique address prefix lengths in the forwarding table given that memory resources scale linearly with the number of prefixes in the forwarding table.Our approach is equally attractive for Internet Protocol Version 6 (IPv6) which uses 128-bit destination addresses, four times longer than IPv4. We present a basic version of our approach along with optimizations leveraging previous advances in LPM algorithms. We also report results of performance simulations of our system using snapshots of IPv4 BGP tables and extend the results to IPv6. Using less than 2Mb of embedded RAM and a commodity SRAM device, our technique achieves average performance of one hash probe per lookup and a worst case of two hash probes and one array access per lookup.},
 author = {Dharmapurikar, Sarang and Krishnamurthy, Praveen and Taylor, David E.},
 title = {Longest Prefix Matching Using Bloom Filters},
 keywords = {forwarding;IP lookup;longest prefix matching},
 pages = {201--212},
 publisher = {{Association for Computing Machinery}},
 isbn = {1581137354},
 series = {SIGCOMM '03},
 booktitle = {Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications},
 year = {2003},
 address = {New York, NY, USA},
 doi = {10.1145/863955.863979},
 file = {LongestPrefix:Attachments/LongestPrefix.pdf:application/pdf}
}


@inproceedings{DharmapurikarS..2003,
 author = {{Dharmapurikar S.} and {Krishnamurthy P.} and {Sproull T.} and {Lockwood J.}},
 title = {Deep packet inspection using parallel Bloom filters},
 keywords = {Intrusion Detection},
 pages = {44--51},
 booktitle = {11th Symposium on High Performance Interconnects, 2003. Proceedings},
 year = {2003},
 doi = {10.1109/CONECT.2003.1231477},
 file = {IntrusionDetection:Attachments/IntrusionDetection.pdf:application/pdf}
}


@article{FabioGrandi.2018,
 abstract = {The Bloom filter is a simple random binary data structure which can be efficiently used for approximate set membership testing. When testing for membership of an object, the Bloom filter may give a false positive, whose probability is the main performance figure of the structure. We complete and extend the analysis of the Bloom filter available in the literature by means of the \textgreek{g}-transform approach. Known results are confirmed and new results are provided, including the variance of the number of bits set to 1 in the filter. We consider the choice of bits to be set to 1 when an object is inserted both with and without replacement, in what we call standard and classic Bloom filter, respectively. Simple iterative schemes for the computation of the false positive probability and a new non-iterative approximation, taking into account the variance of bits set to 1, are also provided.},
 author = {{Fabio Grandi}},
 year = {2018},
 title = {On the analysis of Bloom filters},
 url = {https://www.sciencedirect.com/science/article/pii/S0020019017301606},
 keywords = {Analysis of algorithms;Bloom filters;Data structures;-Transform},
 pages = {35--39},
 volume = {129},
 issn = {0020-0190},
 journal = {Information Processing Letters},
 doi = {10.1016/j.ipl.2017.09.004},
 file = {AnalysisOfBF:Attachments/AnalysisOfBF.pdf:application/pdf}
}


@inproceedings{Fan.1998b,
 abstract = {The sharing of caches among Web proxies is an important technique to reduce Web traffic and alleviate network bottlenecks. Nevertheless it is not widely deployed due to the overhead of existing protocols. In this paper we propose a new protocol called {\textquotedbl}Summary Cache{\textquotedbl}; each proxy keeps a summary of the URLs of cached documents of each participating proxy and checks these summaries for potential hits before sending any queries. Two factors contribute to the low overhead: the summaries are updated only periodically, and the summary representations are economical --- as low as 8 bits per entry. Using trace-driven simulations and a prototype implementation, we show that compared to the existing Internet Cache Protocol (ICP), Summary Cache reduces the number of inter-cache messages by a factor of 25 to 60, reduces the bandwidth consumption by over 50{\%}, and eliminates between 30{\%} to 95{\%} of the CPU overhead, while at the same time maintaining almost the same hit ratio as ICP. Hence Summary Cache enables cache sharing among a large number of proxies.},
 author = {Fan, Li and Cao, Pei and Almeida, Jussara and Broder, Andrei Z.},
 title = {Summary Cache: A Scalable Wide-Area Web Cache Sharing Protocol},
 pages = {254--265},
 publisher = {{Association for Computing Machinery}},
 isbn = {1581130031},
 series = {SIGCOMM '98},
 booktitle = {Proceedings of the ACM SIGCOMM '98 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication},
 year = {1998},
 address = {New York, NY, USA},
 doi = {10.1145/285237.285287},
 file = {CountingBF:Attachments/CountingBF.pdf:application/pdf}
}


@inproceedings{Fan.2014,
 abstract = {In many networking systems, Bloom filters are used for high-speed set membership tests. They permit a small fraction of false positive answers with very good space efficiency. However, they do not permit deletion of items from the set, and previous attempts to extend {\textquotedbl}standard{\textquotedbl} Bloom filters to support deletion all degrade either space or performance.We propose a new data structure called the cuckoo filter that can replace Bloom filters for approximate set membership tests. Cuckoo filters support adding and removing items dynamically while achieving even higher performance than Bloom filters. For applications that store many items and target moderately low false positive rates, cuckoo filters have lower space overhead than space-optimized Bloom filters. Our experimental results also show that cuckoo filters outperform previous data structures that extend Bloom filters to support deletions substantially in both time and space.},
 author = {Fan, Bin and Andersen, Dave G. and Kaminsky, Michael and Mitzenmacher, Michael D.},
 title = {Cuckoo Filter: Practically Better Than Bloom},
 keywords = {Bloom filters;compression;cuckoo hashing},
 pages = {75--88},
 publisher = {{Association for Computing Machinery}},
 isbn = {9781450332798},
 series = {CoNEXT '14},
 booktitle = {Proceedings of the 10th ACM International on Conference on Emerging Networking Experiments and Technologies},
 year = {2014},
 address = {New York, NY, USA},
 doi = {10.1145/2674005.2674994},
 file = {CuckooFilterBetterBF:Attachments/CuckooFilterBetterBF.pdf:application/pdf}
}


@inproceedings{FedorNikitin.2006,
 author = {{Fedor Nikitin}},
 title = {Bloom filters and their applications},
 year = {2006},
 file = {{\"U}berblickBloomFilterUndHashing:Attachments/{\"U}berblickBloomFilterUndHashing.pdf:application/pdf}
}


@article{Gremillion.1982,
 abstract = {The use of a differential file for a database update can yield integrity and performance benefits, but it can also present problems in providing current data to subsequent accessing transactions. A mechanism known as a Bloom filter can solve these problems by preventing most unnecessary searches of the differential file. Here, the design process for a Bloom filter for an on-line student database is described, and it is shown that a very effective filter can be constructed with a modest expenditure of system resources.},
 author = {Gremillion, Lee L.},
 year = {1982},
 title = {Designing a Bloom Filter for Differential File Access},
 keywords = {database design;differential file},
 pages = {600--604},
 volume = {25},
 number = {9},
 issn = {0001-0782},
 journal = {Communications of the ACM},
 doi = {10.1145/358628.358632},
 file = {DatenbankenDifferentialFiles:Attachments/DatenbankenDifferentialFiles.pdf:application/pdf}
}


@proceedings{IEEEInformationTheorySociety.2006,
 year = {2006},
 title = {Proceedings / 2006 IEEE International Symposium on Information Theory: The Westin Seattle, Seattle, Washington, USA, July 9 - 14, 2006},
 address = {Piscataway, NJ},
 publisher = {{IEEE Service Center}},
 isbn = {1-4244-0505-X},
 institution = {{IEEE Information Theory Society}}
}


@inproceedings{Jain.2005,
 abstract = {Search engines have primarily focused on presenting the most relevant pages to the user quickly. A less well explored aspect of improving the search experience is to remove or group all near-duplicate documents in the results presented to the user. In this paper, we apply a Bloom filter based similarity detection technique to address this issue by refining the search results presented to the user. First, we present and analyze our technique for finding similar documents using contentdefined chunking and Bloom filters, and demonstrate its effectiveness in compactly representing and quickly matching pages for similarity testing. Later, we demonstrate how a number of results of popular and random search queries retrieved from different search engines, Google, Yahoo, MSN, are similar and can be eliminated or re-organized.},
 author = {Jain, Navendu and Dahlin, Mike and Tewar, Renu},
 title = {Using Bloom Filters to Refine Web Search Results},
 url = {https://www.microsoft.com/en-us/research/publication/using-bloom-filters-refine-web-search-results/},
 keywords = {Suchmschinen},
 booktitle = {Eighth International Workshop on the Web and Databases (WebDB '05)},
 year = {2005},
 file = {Suchmaschinen:Attachments/Suchmaschinen.pdf:application/pdf}
}


@inproceedings{LauferRafaelP..2007,
 author = {{Laufer Rafael P.} and {Velloso Pedro B.} and {Cunha Daniel de O.} and {Moraes Igor M.} and {Bicudo Marco D.D.} and {Moreira Marcelo D.D.} and {Duarte Otto Carlos M.B.}},
 title = {Towards Stateless Single-Packet IP Traceback},
 keywords = {IP Trace Route},
 pages = {548--555},
 booktitle = {32nd IEEE Conference on Local Computer Networks (LCN 2007)},
 year = {2007},
 doi = {10.1109/LCN.2007.15},
 file = {IPTraceRoute:Attachments/IPTraceRoute.pdf:application/pdf}
}


@article{Mitzenmacher.2002b,
 abstract = {A Bloom filter is a simple space-efficient randomized data structure for representing a set in order to support membership queries. Although Bloom filters allow false positives, for many applications the space savings outweigh this drawback when the probability of an error is sufficiently low. We introduce compressed Bloom filters, which improve performance when the Bloom filter is passed as a message, and its transmission size is a limiting factor. For example, Bloom filters have been suggested as a means for sharing Web cache information. In this setting, proxies do not share the exact contents of their caches, but instead periodically broadcast Bloom filters representing their caches. By using compressed Bloom filters, proxies can reduce the number of bits broadcast, the false positive probability, and/or the amount of computation per lookup. The cost is the processing time for compression and decompression, which can use simple arithmetic coding, and more memory use at the proxies, which utilize the larger uncompressed form of the Bloom filter.},
 author = {Mitzenmacher, Michael},
 year = {2002},
 title = {Compressed Bloom Filters},
 keywords = {algorithms;computer networks;distributed computing;distributed information systems;information theory},
 pages = {604--612},
 volume = {10},
 number = {5},
 issn = {1063-6692},
 journal = {IEEE/ACM Transactions on Networking},
 doi = {10.1109/TNET.2002.803864},
 file = {CompressedBF:Attachments/CompressedBF.pdf:application/pdf}
}


@article{Murugan.2020,
 author = {Murugan, Selvakumar and Bakthavatchalam, Tamil Arasan and Sankarasubbu, Malaikannan},
 year = {2020},
 title = {SymSpell and LSTM based Spell-Checkers for Tamil},
 keywords = {Spell Checking},
 file = {SpellChecking:Attachments/SpellChecking.pdf:application/pdf}
}


@misc{Nayak.06.06.2021,
 abstract = {Bloom Filter is an important probabilistic data structure to reduce memory consumption for membership filters. It is applied in diverse domains such as Computer Networking, Network Security and Privacy, IoT, Edge Computing, Cloud Computing, Big Data, and Biometrics. But Bloom Filter has an issue of the false positive probability. To address this issue, we propose a novel robust Bloom Filter, robustBF for short. robustBF is a 2D Bloom Filter, capable of filtering millions of data with high accuracy without compromising the performance. Our proposed system is presented in two-fold. Firstly, we modify the murmur hash function, and test all modified hash functions for improvements and select the best-modified hash function experimentally. Secondly, we embed the modified hash functions in 2D Bloom Filter. Our experimental results show that robustBF is better than standard Bloom Filter and counting Bloom Filter in every aspect. robustBF exhibits nearly zero false positive probability with more than {\$}10$\backslash$times{\$} and {\$}44$\backslash$times{\$} lower memory consumption than standard Bloom filter and counting Bloom Filter, respectively.},
 author = {Nayak, Sabuzima and Patgiri, Ripon},
 date = {06.06.2021},
 title = {RobustBF: A High Accuracy and Memory Efficient 2D Bloom Filter},
 url = {https://arxiv.org/pdf/2106.04365},
 file = {Nayak, Patgiri 06.06.2021 - RobustBF A High Accuracy:Attachments/Nayak, Patgiri 06.06.2021 - RobustBF A High Accuracy.pdf:application/pdf;Nayak, Patgiri 06.06.2021 - RobustBF A High Accuracy (2):Attachments/Nayak, Patgiri 06.06.2021 - RobustBF A High Accuracy (2).pdf:application/pdf}
}


@inproceedings{Pagh.2005,
 abstract = {This paper considers space-efficient data structures for storing an approximation S' to a set S such that S $\subseteq$ S' and any element not in S belongs to S' with probability at most $\in$. The Bloom filter data structure, solving this problem, has found widespread use. Our main result is a new RAM data structure that improves Bloom filters in several ways:• The time for looking up an element in S' is O(1), independent of $\in$.• The space usage is within a lower order term of the lower bound.• The data structure uses explicit hash function families.• The data structure supports insertions and deletions on S in amortized expected constant time.The main technical ingredient is a succinct representation of dynamic multisets. We also consider three recent generalizations of Bloom filters.},
 author = {Pagh, Anna and Pagh, Rasmus and Rao, S. Srinivasa},
 title = {An Optimal Bloom Filter Replacement},
 pages = {823--829},
 publisher = {{Society for Industrial and Applied Mathematics}},
 isbn = {0898715857},
 series = {SODA '05},
 booktitle = {Proceedings of the Sixteenth Annual ACM-SIAM Symposium on Discrete Algorithms},
 year = {2005},
 address = {USA},
 file = {BloomFilterReplacement:Attachments/BloomFilterReplacement.pdf:application/pdf}
}


@article{Pal.,
 author = {Pal, Saibal K.},
 title = {Bloom filters {\&} their applications},
 file = {BloomFIlterUndIhreApplications:Attachments/BloomFIlterUndIhreApplications.pdf:application/pdf}
}


@article{Patgiri.2018,
 abstract = {Distributed Denial-of-Service (DDoS) is a menace for service provider and prominent issue in network security. Defeating or defending the DDoS is a prime challenge. DDoS make a service unavailable for a certain time. This phenomenon harms the service providers, and hence, loss of business revenue. Therefore, DDoS is a grand challenge to defeat. There are numerous mechanism to defend DDoS, however, this paper surveys the deployment of Bloom Filter in defending a DDoS attack. The Bloom Filter is a probabilistic data structure for membership query that returns either true or false. Bloom Filter uses tiny memory to store information of large data. Therefore, packet information is stored in Bloom Filter to defend and defeat DDoS. This paper presents a survey on DDoS defending technique using Bloom Filter.},
 author = {Patgiri, Ripon and Nayak, Sabuzima and Borgohain, Samir},
 year = {2018},
 title = {Preventing DDoS using Bloom Filter: A Survey},
 url = {https://arxiv.org/pdf/1810.06689},
 pages = {155865},
 volume = {5},
 number = {19},
 journal = {ICST Transactions on Scalable Information Systems},
 doi = {10.4108/eai.19-6-2018.155865},
 file = {Patgiri, Nayak et al. 2018 - Preventing DDoS using Bloom Filter:Attachments/Patgiri, Nayak et al. 2018 - Preventing DDoS using Bloom Filter.pdf:application/pdf;Patgiri, Nayak et al. 2018 - Preventing DDoS using Bloom Filter (2):Attachments/Patgiri, Nayak et al. 2018 - Preventing DDoS using Bloom Filter (2).pdf:application/pdf}
}


@article{Patgiri.2019,
 author = {Patgiri, Ripon and Nayak, Sabuzima and Borgohain, Samir Kumar},
 year = {2019},
 title = {Shed More Light on Bloom Filter's Variants},
 keywords = {Algorithms (cs.DS);Data structures;FOS: Computer;information sciences},
 doi = {10.48550/ARXIV.1903.12525}
}


@article{RafaelP.Laufer.2011,
 abstract = {Distributed applications use Bloom filters to transmit large sets in a compact form. However, attackers can easily disrupt these applications by using or advertising saturated filters. In this paper we introduce the Generalized Bloom Filter (GBF), a space-efficient data structure to securely represent a set in distributed applications, such as IP traceback, web caching, and peer-to-peer networks. Different from the standard Bloom filter, the GBF has an upper bound on the false-positive probability, limiting the effect of these attacks. The key idea of the GBF is to not only set, but also reset bits of the filter at each insertion. This procedure limits the false positives at the expense of introducing false negatives in membership queries. We derive expressions for the false-positive and false-negative rates and show that they are both upper-bounded in the GBF. We conduct simulations that validate the derived expressions and explore the tradeoffs of this data structure.},
 author = {{Rafael P. Laufer} and {Pedro B. Velloso} and {Otto Carlos M.B. Duarte}},
 year = {2011},
 title = {A Generalized Bloom Filter to Secure Distributed Network Applications},
 url = {https://www.sciencedirect.com/science/article/pii/S1389128610003920},
 keywords = {Bloom filters;Data structures;Network security},
 pages = {1804--1819},
 volume = {55},
 number = {8},
 issn = {1389-1286},
 journal = {Computer Networks},
 doi = {10.1016/j.comnet.2010.12.025},
 file = {GeneralizedBF:Attachments/GeneralizedBF.pdf:application/pdf}
}


@inproceedings{RheaS.C..2002,
 author = {{Rhea S.C.} and {Kubiatowicz J.}},
 title = {Probabilistic location and routing},
 keywords = {Routing},
 pages = {1248-1257 vol.3},
 volume = {3},
 booktitle = {Proceedings.Twenty-First Annual Joint Conference of the IEEE Computer and Communications Societies},
 year = {2002},
 doi = {10.1109/INFCOM.2002.1019375},
 file = {Routing:Attachments/Routing.pdf:application/pdf}
}


@article{Rothenberg.2010,
 author = {Rothenberg, Christian and Macapuna, Carlos and Verdi, Fabio and Magalhaes, Mauricio},
 year = {2010},
 title = {The deletable Bloom filter: a new member of the Bloom family},
 pages = {557--559},
 volume = {14},
 number = {6},
 issn = {1089-7798},
 journal = {IEEE Communications Letters},
 doi = {10.1109/LCOMM.2010.06.100344},
 file = {Rothenberg, Macapuna et al. 2010 - The deletable Bloom filter:Attachments/Rothenberg, Macapuna et al. 2010 - The deletable Bloom filter.pdf:application/pdf}
}


@article{RottenstreichOri.2014,
 author = {{Rottenstreich Ori} and {Kanizo Yossi} and {Keslassy Isaac}},
 year = {2014},
 title = {The Variable-Increment Counting Bloom Filter},
 pages = {1092--1105},
 volume = {22},
 number = {4},
 issn = {1063-6692},
 journal = {IEEE/ACM Transactions on Networking},
 doi = {10.1109/TNET.2013.2272604},
 file = {VariableIncrementCountingBF:Attachments/VariableIncrementCountingBF.pdf:application/pdf}
}


@article{SaibalKumarPal.2012,
 author = {{Saibal Kumar Pal} and {Puneet Sardana}},
 year = {2012},
 title = {BLOOM FILTERS {\&} THEIR APPLICATIONS},
 pages = {25--29},
 volume = {1},
 journal = {International Journal of Computer Applications Technology and Research},
 file = {BloomFIlterUndIhreApplications:Attachments/BloomFIlterUndIhreApplications.pdf:application/pdf}
}


@article{Wang.1999,
 abstract = {The World Wide Web can be considered as a large distributed information system that provides access to shared data objects. As one of the most popular applications currently running on the Internet, the World Wide Web is of an exponential growth in size, which results in network congestion and server overloading. Web caching has been recognized as one of the effective schemes to alleviate the service bottleneck and reduce the network traffic, thereby minimize the user access latency. In this paper, we first describe the elements of a Web caching system and its desirable properties. Then, we survey the state-of-art techniques which have been used in Web caching systems. Finally, we discuss the research frontier in Web caching.},
 author = {Wang, Jia},
 year = {1999},
 title = {A Survey of Web Caching Schemes for the Internet},
 keywords = {Web Cache},
 pages = {36--46},
 volume = {29},
 number = {5},
 issn = {0146-4833},
 journal = {SIGCOMM Comput. Commun. Rev.},
 doi = {10.1145/505696.505701},
 file = {WebCache:Attachments/WebCache.pdf:application/pdf}
}


@inproceedings{WhitakerA..2002,
 author = {{Whitaker A.} and {Wetherall D.}},
 title = {Forwarding without loops in Icarus},
 keywords = {Loop Prevention},
 pages = {63--75},
 booktitle = {2002 IEEE Open Architectures and Network Programming Proceedings. OPENARCH 2002 (Cat. No.02EX571)},
 year = {2002},
 doi = {10.1109/OPNARC.2002.1019229},
 file = {LoopPrevention:Attachments/LoopPrevention.pdf:application/pdf}
}


